

# kafka:
#   replicaCount: 1
  # zookeeper:
  #   replicaCount: 1
#   provisioning:
#     topics:
#       - name: topic1
#         partitions: 2
#         replicationFactor: 1
  #       config:
  #         max.message.bytes: 64000
  #         flush.messages: 1
  # metrics:
  #   kafka:
  #     enabled: true
  # externalAccess:
  #   enabled: true
  #   service:
  #     type: NodePort
  #     nodePorts:
  #       - 30123

replicaCount: 1
configMapDir: {}

image:
  repository: kafka:latest
  version: 0.0.1
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# service:
#   type: NodePort
#   port: 80


resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

elasticsearch:

  namespaceOverride: elasticsearch
  replicas: 1
  minimumMasterNodes: 1
  clusterHealthCheckParams: "wait_for_status=green&timeout=60s"
  esJavaOpts: "-Xmx1g -Xms1g"

  resources:
    requests:
      cpu: "550m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"

  podManagementPolicy: "Parallel"

  # This is the max unavailable setting for the pod disruption budget
  # The default value of 1 will make sure that kubernetes won't allow more than 1
  # of your pods to be unavailable during maintenance
  maxUnavailable: 1

  readinessProbe:
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

# elasticsearch:
#   master:
#     replicas: 1
#   namespaceOverride: elasticsearch

kube-prometheus-stack:
  namespaceOverride: metric

metrics-server:
  namespaceOverride: metric



# prometheus:
#   kafka:
#     enabled: true

# grafana:
#   metrics:
#     enabled: true
#     service:
#       annotations:
#         prometheus.io/scrape: "true"
#         prometheus.io/port: "3000"
#         prometheus.io/path: "/metrics"